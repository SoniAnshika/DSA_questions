class Solution {
    private:
    vector<int> res;
    
    public:    
    void dfs(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& visited, bool flag){
        //if out of range, return
        if(i == matrix.size() || j == matrix[0].size() || i < 0 || j < 0){
            return;
        }
        //if already visited, return
        if(visited[i][j] != 0){
            return;
        }
        //taking the value to our result as well marking visited
        res.push_back(matrix[i][j]);
        visited[i][j]=1;
       class Solution {
    private:
    vector<int> res;
    
    public:    
    void dfs(int i, int j, vector<vector<int>>& matrix, vector<vector<int>>& visited, bool flag){
        //if out of range, return
        if(i == matrix.size() || j == matrix[0].size() || i < 0 || j < 0){
            return;
        }
        //if already visited, return
        if(visited[i][j] != 0){
            return;
        }
        //taking the value to our result as well marking visited
        res.push_back(matrix[i][j]);
        visited[i][j]=1;
        /*
        flag true means we are coming from the bottom, i.e. outer layer done
        give us priority over going to the right ;-;
        */
        if (flag==true){
            dfs(i-1, j, matrix, visited, true);    //up
            dfs(i, j+1, matrix, visited, false);   //right
            dfs(i+1, j, matrix, visited, false);   //down
            dfs(i, j-1, matrix, visited, false);   //left          
        }else{
            dfs(i, j+1, matrix, visited, false);   //right
            dfs(i+1, j, matrix, visited, false);   //down
            dfs(i, j-1, matrix, visited, false);   //left
            dfs(i-1, j, matrix, visited, true);    //up    
        }
    }
    
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        auto n = matrix.size();
        auto m = matrix[0].size();
        vector<vector<int>> visited {n,vector<int>(m, 0)};
        dfs(0, 0, matrix, visited, false);
        return res;
    }
};
        if (flag==true){
            dfs(i-1, j, matrix, visited, true);    //up
            dfs(i, j+1, matrix, visited, false);   //right
            dfs(i+1, j, matrix, visited, false);   //down
            dfs(i, j-1, matrix, visited, false);   //left          
        }else{
            dfs(i, j+1, matrix, visited, false);   //right
            dfs(i+1, j, matrix, visited, false);   //down
            dfs(i, j-1, matrix, visited, false);   //left
            dfs(i-1, j, matrix, visited, true);    //up    
        }
    }
    
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        auto n = matrix.size();
        auto m = matrix[0].size();
        vector<vector<int>> visited {n,vector<int>(m, 0)};
        dfs(0, 0, matrix, visited, false);
        return res;
    }
};
